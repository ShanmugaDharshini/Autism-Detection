# -*- coding: utf-8 -*-
"""Capstone Project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M1qpuCWy8wuelyrHMos6KFLtMGWFU7mg
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import random
import os
import gc
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import matplotlib.patheffects as PathEffects
# %matplotlib inline

from sklearn.manifold import TSNE
# from tensorflow import keras
# from tensorflow.keras import layers
# from tensorflow.keras import models, Sequential
# from tensorflow.keras import optimizers

# from keras.layers.core import Dense, Dropout, Flatten
# from keras.layers.convolutional import Conv2D, MaxPooling2D, SeparableConv2D

# from tensorflow.keras.applications.vgg16 import VGG16

from keras.preprocessing.image import ImageDataGenerator
from keras.preprocessing.image import img_to_array, load_img

from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.metrics import roc_curve, auc
from sklearn.metrics import precision_recall_curve

train_dir = "/content/drive/MyDrive/AutismDataset/train"
test_dir = "/content/drive/MyDrive/AutismDataset/test"

train_non_autistic = []
train_autistic = []
for i in os.listdir(train_dir):
    if 'Non_Autistic' in ("/content/drive/MyDrive/AutismDataset/train/{}".format(i)):
        train_non_autistic.append(("/content/drive/MyDrive/AutismDataset/train/{}".format(i)))
    else:
        train_autistic.append(("/content/drive/MyDrive/AutismDataset/train/{}".format(i)))

# Getting test images from test data file path
test_imgs = ["/content/drive/MyDrive/AutismDataset/test/{}".format(i) for i in os.listdir(test_dir)]


# Concatenate 'Autistic'  and 'Non-Autistic' images and shuffle them as train_images
train_imgs = train_autistic + train_non_autistic
random.shuffle(train_imgs)

# Remove the lists to save space
del train_autistic
del train_non_autistic
gc.collect()

import matplotlib.image as mpimg
for ima in train_imgs[0:3]:
  img=mpimg.imread(ima)
  imgplot=plt.imshow(img)
  plt.show()

train_imgs

nrows = 150
ncolumns  = 150
channels = 3

# Read and process the images: Function returns X,y. X - list of resized images, y - list of labels for the images

def read_and_process_image(list_of_images):
    X = []
    y = []

    for image in list_of_images:
        X.append(cv2.resize(cv2.imread(image, cv2.IMREAD_COLOR), (nrows, ncolumns), interpolation = cv2.INTER_CUBIC))
        if 'Non_Autistic' in image:
            y.append(0)
        else:
            y.append(1)

    return X,y

import cv2
X_train, y_train = read_and_process_image(train_imgs)

import seaborn as sns
import numpy as np
sns.set_palette(sns.color_palette(["b", "r"]))
plt.figure(figsize=(12, 8))
X_train = np.array(X_train)
y_train = np.array(y_train)
#sns.countplot(y_train, saturation=1)
#plt.title("Train image labels");

def process_data_tsne(list_of_images):

    """ Read and pre-process images to specified dimensions, separate image pixels and labels, convert the lists to numpy array

    Parameters:
    list_of_images: Input image data

    Returns:
    Numpy array of image pixels and labels
    """

    nrows = 150
    ncolumns  = 150
    channels = 3

    X = []
    y = []

    for image in list_of_images:
        X.append(cv2.resize(cv2.imread(image, cv2.COLOR_BGR2GRAY), (nrows, ncolumns)))
        if 'Non_Autistic' in image:
            y.append(0)
        else:
          y.append(1)

    X = np.asarray(X)
    y = np.asarray(y)
    X = X.reshape(2540, 150*150*3)

    return X,y

features, labels = process_data_tsne(train_imgs)

tsne = TSNE(random_state=42).fit_transform(features)

def visualise_tsne_3d(tsne_data, target):
    colour_map = []
    for i in target:
        if i == 1:
            colour_map.append('r')
        else:
            colour_map.append('b')

    fig = plt.figure(figsize=(18, 18))
    ax = fig.add_subplot(111, projection='3d')
    ax.scatter(*zip(*tsne), c=colour_map, s=30, alpha=1)
    legenditems = [(plt.Rectangle((0,0),1,1, color=c), "Non_Autistic" if str(i) == '0' else "Autistic") for i,c in enumerate(np.unique(colour_map))]
    plt.legend(*zip(*legenditems))
    plt.show()

visualise_tsne_3d(tsne, labels)

def visualise_tsne_datapoints(tsne_data, labels):

    """Takes in tsne projections, plots distribution of datapoints in 2 classes"""

    tx = tsne_data[:,0]
    ty = tsne_data[:,1]
    plt.figure(figsize=(20,18))
    sns.scatterplot(
    x=tx, y=ty,
    hue=labels,
    palette=['blue', 'red'],
    s=300,
    legend='auto'
    )

visualise_tsne_datapoints(tsne,labels)

from sklearn.ensemble import RandomForestClassifier
model=RandomForestClassifier()

nsamples, nx, ny, nrgb = X_train.shape
X_train2 = X_train.reshape((nsamples,nx*ny*nrgb))

random.shuffle(test_imgs)
X_test, y_test = read_and_process_image(test_imgs)
X = np.array(X_test)

nsamples, nx, ny, nrgb = X.shape
X_test2 = X.reshape((nsamples,nx*ny*nrgb))

model.fit(X_train2,y_train)

y_pred=model.predict(X_train2)

from sklearn.metrics import accuracy_score
print(accuracy_score(y_pred,y_train))





y_pred2=model.predict(X_test2)

from sklearn.metrics import accuracy_score
print(accuracy_score(y_pred2,y_test))

"""Accuracy improved by 0.01"""

y_test

from google.colab import files
from IPython.display import Image

uploaded = files.upload()

for filename in uploaded.keys():
    print('User uploaded file "{name}" with length {length} bytes'.format(
        name=filename, length=len(uploaded[filename])))

# Display the uploaded image
img=Image(list(uploaded.keys())[0])
img

from PIL import Image
import numpy as np
from google.colab import files

# Upload the image file
uploaded = files.upload()

# Open the image from the uploaded file
img = Image.open(list(uploaded.keys())[0])

# Convert the image to a NumPy array
img_array = np.array(img)

# Display the shape of the NumPy array
print("Shape of the NumPy array:", img_array.shape)

# Display the NumPy array
print("NumPy array representation of the image:")
print(img_array)

pip install pillow

from PIL import Image
import numpy as np

# # Open the image file
# img = Image.open("/content/drive/MyDrive/AutismDataset/test/Autistic.1.jpg")

# Convert the image to a NumPy array
img_array = np.array(img)

# Print the shape of the NumPy array
print("Shape of the array:", img_array.shape)
img

from PIL import Image
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
img_flat = img_array.flatten()
target = np.random.randint(0, 2, len(img_flat))
X_train, X_test, y_train, y_test = train_test_split(img_flat, target, test_size=0.2, random_state=42)
clf = RandomForestClassifier()
clf.fit(X_train.reshape(-1, 1), y_train)
predictions = clf.predict(img_array.reshape(-1, 1))
predicted=predictions[0]
if predicted==1:
  print("Non-Autistic")
else:
  print("Autistic")
print(predictions[0])